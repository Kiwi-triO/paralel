//Задание 6. Считается, что в большинстве реализаций опция private действует следующим образом : 1) значения локальных переменных,
//создаваемых в параллельной области, не инициализируются значением
//одноименной переменной, созданной в последовательной области до
//входа в параллельную; 2) значение одноименной переменной, созданной
//в последовательной области до входа в параллельную, не зависит от значений локальных переменных и остается неизменным после выхода из
//параллельной области.Разработать соответствующую программу

#include <iostream>
#include <omp.h>
#include <locale.h>
using namespace std;

int main(int argc, char* argv[]) {
	setlocale(LC_ALL, ".ACP");
	int n = 1;

	cout << "n в последовательной области (начало): " << n << endl;

#pragma omp parallel num_threads(4) private(n)
	{
		cout << "Значение n на нити (на входе): " << n << endl;

		/* Присвоим переменной n номер текущей нити */
		n = omp_get_thread_num();
		cout << "Значение n на нити (на выходе): " << n << endl;
	}

	cout << "n в последовательной области (конец): " << n << endl;
}

