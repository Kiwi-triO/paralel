//Задание 4. На примере задачи нахождения суммы векторов достаточно большой размерности, 
//проиллюстрировать распределение итераций цикла между потоками в параллельной области при помощи директивы omp for.

#include <iostream>
#include <omp.h>
#include <locale.h>
using namespace std;

#define NN 35  // Размерность векторов

int main(int argc, char* argv[]) {
	setlocale(LC_ALL, ".ACP");

	int A[NN], B[NN], C[NN];    // Объявление векторов

	// Заполнение исходных векторов
	for (int i = 0; i < NN; i++) {
		A[i] = i;       // Вектор A: 0, 1, 2, ..., 34
		B[i] = 2 * i;   // Вектор B: 0, 2, 4, ..., 68
		C[i] = 0;       // Инициализация результирующего вектора нулями
	}

	// Создание параллельной области с 4 потоками
#pragma omp parallel num_threads(4)
	{
		int thread_id = omp_get_thread_num();  // Получение ID текущего потока

		// Распределение итераций цикла между потоками
#pragma omp for
		for (int i = 0; i < NN; i++) {
			C[i] = A[i] + B[i];  // Вычисление суммы элементов векторов

			// Вывод информации о выполнении итерации
#pragma omp critical
			{
				cout << "Поток " << thread_id << " сложил элементы с номером " << i << endl;
			}
		}
	}

	// Дополнительно: вывод результатов вычислений
	cout << "\nРезультаты сложения векторов (первые 10 элементов):" << endl;
	for (int i = 0; i < 10; i++) {
		cout << "C[" << i << "] = " << A[i] << " + " << B[i] << " = " << C[i] << endl;
	}
}