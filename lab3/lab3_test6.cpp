﻿//Задание 6. Разработать программу, иллюстрирующую возможность реализации конечного(неитеративного) 
//параллелизма при помощи директив omp sections и omp section

#include <iostream>
#include <omp.h>
#include <locale.h>
using namespace std;

int main(int argc, char* argv[])
{
	setlocale(LC_ALL, ".ACP"); // Установка локали для корректного отображения кириллицы
	int n;

	// Создание параллельной области с 3 потоками
#pragma omp parallel num_threads(3) private(n)
	{
		n = omp_get_thread_num(); // Получение номера текущего потока

		// Начало секционной конструкции - распределение секций между потоками
#pragma omp sections
		{
			// Первая секция - выполняется одним из потоков
#pragma omp section
			{
				cout << "Первая секция, поток " << n << endl;
			}

			// Вторая секция - выполняется одним из потоков
#pragma omp section
			{
				cout << "Вторая секция, поток " << n << endl;
			}

			// Третья секция - выполняется одним из потоков
#pragma omp section
			{
				cout << "Третья секция, поток " << n << endl;
			}

			// Четвертая секция - выполняется одним из потоков
#pragma omp section
			{
				cout << "Четвертая секция, поток " << n << endl;
			}

			// Пятая секция - выполняется одним из потоков
#pragma omp section
			{
				cout << "Пятая секция, поток " << n << endl;
			}
		} // Конец секционной конструкции - барьерная синхронизация

		// Этот код выполняется всеми потоками после завершения секций
		cout << "Параллельная область, поток " << n << endl;
	}
}